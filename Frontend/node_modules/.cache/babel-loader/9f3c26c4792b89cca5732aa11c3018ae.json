{"ast":null,"code":"/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\nconst element = document.createElement('i');\n/**\n * @param {string} value\n * @returns {string|false}\n */\n\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';';\n  element.innerHTML = characterReference;\n  const char = element.textContent; // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n\n  if (char.charCodeAt(char.length - 1) === 59\n  /* `;` */\n  && value !== 'semi') {\n    return false;\n  } // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n\n\n  return char === characterReference ? false : char;\n}","map":{"version":3,"names":["element","document","createElement","decodeNamedCharacterReference","value","characterReference","innerHTML","char","textContent","charCodeAt","length"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/decode-named-character-reference/index.dom.js"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n"],"mappings":"AAAA;;AAEA;AAEA,MAAMA,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAhB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,6BAAT,CAAuCC,KAAvC,EAA8C;EACnD,MAAMC,kBAAkB,GAAG,MAAMD,KAAN,GAAc,GAAzC;EACAJ,OAAO,CAACM,SAAR,GAAoBD,kBAApB;EACA,MAAME,IAAI,GAAGP,OAAO,CAACQ,WAArB,CAHmD,CAKnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAID,IAAI,CAACE,UAAL,CAAgBF,IAAI,CAACG,MAAL,GAAc,CAA9B,MAAqC;EAAG;EAAxC,GAAqDN,KAAK,KAAK,MAAnE,EAA2E;IACzE,OAAO,KAAP;EACD,CAfkD,CAiBnD;EACA;EACA;EACA;;;EACA,OAAOG,IAAI,KAAKF,kBAAT,GAA8B,KAA9B,GAAsCE,IAA7C;AACD"},"metadata":{},"sourceType":"module"}