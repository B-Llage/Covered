{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length;\n  /** @type {number|undefined} */\n\n  let content;\n  /** @type {number|undefined} */\n\n  let text;\n  /** @type {number|undefined} */\n\n  let definition; // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === types.content) {\n        content = index;\n        break;\n      }\n\n      if (events[index][1].type === types.paragraph) {\n        text = index;\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === types.content) {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n\n      if (!definition && events[index][1].type === types.definition) {\n        definition = index;\n      }\n    }\n  }\n\n  assert(text !== undefined, 'expected a `text` index to be found');\n  assert(content !== undefined, 'expected a `text` index to be found');\n  const heading = {\n    type: types.setextHeading,\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }; // Change the paragraph to setext heading text.\n\n  events[text][1].type = types.setextHeadingText; // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  } // Add the heading exit at the end.\n\n\n  events.push(['exit', heading, context]);\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  /** @type {boolean} */\n\n  let paragraph; // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (self.events[index][1].type !== types.lineEnding && self.events[index][1].type !== types.linePrefix && self.events[index][1].type !== types.content) {\n      paragraph = self.events[index][1].type === types.paragraph;\n      break;\n    }\n  }\n\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.dash || code === codes.equalsTo, 'expected `=` or `-`');\n\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(types.setextHeadingLine);\n      effects.enter(types.setextHeadingLineSequence);\n      marker = code;\n      return closingSequence(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return closingSequence;\n    }\n\n    effects.exit(types.setextHeadingLineSequence);\n    return factorySpace(effects, closingSequenceEnd, types.lineSuffix)(code);\n  }\n  /** @type {State} */\n\n\n  function closingSequenceEnd(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.setextHeadingLine);\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","codes","types","setextUnderline","name","tokenize","tokenizeSetextUnderline","resolveTo","resolveToSetextUnderline","events","context","index","length","content","text","definition","type","paragraph","splice","undefined","heading","setextHeading","start","Object","assign","end","setextHeadingText","push","effects","nok","self","marker","lineEnding","linePrefix","code","dash","equalsTo","parser","lazy","now","line","interrupt","enter","setextHeadingLine","setextHeadingLineSequence","closingSequence","consume","exit","closingSequenceEnd","lineSuffix","eof"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-core-commonmark/dev/lib/setext-underline.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n  let content\n  /** @type {number|undefined} */\n  let text\n  /** @type {number|undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === types.content) {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === types.paragraph) {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === types.content) {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === types.definition) {\n        definition = index\n      }\n    }\n  }\n\n  assert(text !== undefined, 'expected a `text` index to be found')\n  assert(content !== undefined, 'expected a `text` index to be found')\n\n  const heading = {\n    type: types.setextHeading,\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = types.setextHeadingText\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n  let marker\n  /** @type {boolean} */\n  let paragraph\n\n  // Find an opening.\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== types.lineEnding &&\n      self.events[index][1].type !== types.linePrefix &&\n      self.events[index][1].type !== types.content\n    ) {\n      paragraph = self.events[index][1].type === types.paragraph\n      break\n    }\n  }\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.dash || code === codes.equalsTo,\n      'expected `=` or `-`'\n    )\n\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(types.setextHeadingLine)\n      effects.enter(types.setextHeadingLineSequence)\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit(types.setextHeadingLineSequence)\n    return factorySpace(effects, closingSequenceEnd, types.lineSuffix)(code)\n  }\n\n  /** @type {State} */\n  function closingSequenceEnd(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.setextHeadingLine)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}