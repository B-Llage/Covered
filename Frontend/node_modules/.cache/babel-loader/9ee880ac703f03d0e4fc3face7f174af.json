{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker;\n  /** @type {string} */\n\n  let buffer;\n  /** @type {number} */\n\n  let index;\n  /** @type {State} */\n\n  let returnState;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.htmlText);\n    effects.enter(types.htmlTextData);\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentOpen;\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code);\n      buffer = constants.cdataOpeningString;\n      index = 0;\n      return cdataOpen;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentStart;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentStart(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code);\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentStartDash;\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function commentStartDash(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code);\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code);\n      return commentClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return comment;\n  }\n  /** @type {State} */\n\n\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return end;\n    }\n\n    return comment(code);\n  }\n  /** @type {State} */\n\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === buffer.length ? cdata : cdataOpen;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return cdata;\n  }\n  /** @type {State} */\n\n\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n\n    return cdata(code);\n  }\n  /** @type {State} */\n\n\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code);\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n\n    return cdata(code);\n  }\n  /** @type {State} */\n\n\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return declaration;\n  }\n  /** @type {State} */\n\n\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code);\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      return instructionClose;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return instruction;\n  }\n  /** @type {State} */\n\n\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagClose(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n\n    return tagCloseBetween(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n\n    return end(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpen(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n\n    if (code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      return end;\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n\n    return end(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeName(code) {\n    if (code === codes.dash || code === codes.dot || code === codes.colon || code === codes.underscore || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n\n    return tagOpenAttributeNameAfter(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n\n    return tagOpenBetween(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueBefore(code) {\n    if (code === codes.eof || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent) {\n      return nok(code);\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return atLineEnding(code);\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n\n    effects.consume(code);\n    marker = undefined;\n    return tagOpenAttributeValueUnquoted;\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return tagOpenAttributeValueQuotedAfter;\n    }\n\n    if (code === codes.eof) {\n      return nok(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return atLineEnding(code);\n    }\n\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === codes.greaterThan || code === codes.slash || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === codes.eof || code === codes.quotationMark || code === codes.apostrophe || code === codes.lessThan || code === codes.equalsTo || code === codes.graveAccent) {\n      return nok(code);\n    }\n\n    if (code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  } // We canâ€™t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n\n  function atLineEnding(code) {\n    assert(returnState, 'expected return state');\n    assert(markdownLineEnding(code), 'expected eol');\n    effects.exit(types.htmlTextData);\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, afterPrefix, types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize);\n  }\n  /** @type {State} */\n\n\n  function afterPrefix(code) {\n    effects.enter(types.htmlTextData);\n    return returnState(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      effects.exit(types.htmlTextData);\n      effects.exit(types.htmlText);\n      return ok;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","codes","constants","types","htmlText","name","tokenize","tokenizeHtmlText","effects","nok","self","marker","buffer","index","returnState","start","code","lessThan","enter","htmlTextData","consume","open","exclamationMark","declarationOpen","slash","tagCloseStart","questionMark","instruction","tagOpen","dash","commentOpen","leftSquareBracket","cdataOpeningString","cdataOpen","declaration","commentStart","eof","greaterThan","commentStartDash","comment","commentClose","atLineEnding","end","charCodeAt","length","cdata","rightSquareBracket","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","colon","underscore","tagOpenAttributeName","dot","tagOpenAttributeNameAfter","equalsTo","tagOpenAttributeValueBefore","graveAccent","quotationMark","apostrophe","tagOpenAttributeValueQuoted","undefined","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","exit","lineEnding","afterPrefix","linePrefix","parser","constructs","disable","null","includes","tabSize"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-core-commonmark/dev/lib/html-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\n\n/** @type {Tokenizer} */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n  let marker\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlText)\n    effects.enter(types.htmlTextData)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      buffer = constants.cdataOpeningString\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentStart(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function commentStartDash(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n\n  /** @type {State} */\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n\n  /** @type {State} */\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /** @type {State} */\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /** @type {State} */\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n\n  /** @type {State} */\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n\n  /** @type {State} */\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code)\n  }\n\n  /** @type {State} */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagClose(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n\n  /** @type {State} */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n\n  /** @type {State} */\n  function tagOpen(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeName(code) {\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.greaterThan ||\n      code === codes.slash ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  // We canâ€™t have blank lines in content, so no need to worry about empty\n  // tokens.\n  /** @type {State} */\n  function atLineEnding(code) {\n    assert(returnState, 'expected return state')\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.exit(types.htmlTextData)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    effects.enter(types.htmlTextData)\n    return returnState(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      effects.exit(types.htmlTextData)\n      effects.exit(types.htmlText)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}