{"ast":null,"code":"/**\n * @remix-run/router v1.0.5\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst validActionMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validActionMethods = new Set(validActionMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result, opts && opts.replace === true);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult);\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, replace) {\n    var _window;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation; // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && formMethod && isSubmissionMethod(formMethod) && formEncType && formData) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData\n        }\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp) {\n    let {\n      requestContext\n    } = _temp === void 0 ? {} : _temp;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp2) {\n    let {\n      routeId,\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp3) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp3 === void 0 ? {} : _temp3;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isSubmissionMethod(method) {\n  return validActionMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","origin","invariant","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","result","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectLocation","_window","newOrigin","redirectHistoryAction","isSubmissionMethod","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","query","_temp","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp2","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_temp3","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["C:\\Users\\hecto\\source\\repos\\React-Projects\\covered\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\hecto\\source\\repos\\React-Projects\\covered\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\hecto\\source\\repos\\React-Projects\\covered\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, { signal: request.signal });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}