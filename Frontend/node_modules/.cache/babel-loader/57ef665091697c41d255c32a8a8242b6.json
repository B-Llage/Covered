{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n\n  let content;\n  /** @type {Token} */\n\n  let text; // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === types.whitespace) {\n    contentStart += 2;\n  } // Suffix whitespace, part of the closing.\n\n\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === types.whitespace) {\n    contentEnd -= 2;\n  }\n\n  if (events[contentEnd][1].type === types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === types.whitespace)) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: types.atxHeadingText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: types.chunkText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: constants.contentTypeText\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.numberSign, 'expected `#`');\n    effects.enter(types.atxHeading);\n    effects.enter(types.atxHeadingSequence);\n    return fenceOpenInside(code);\n  }\n  /** @type {State} */\n\n\n  function fenceOpenInside(code) {\n    if (code === codes.numberSign && size++ < constants.atxHeadingOpeningFenceSizeMax) {\n      effects.consume(code);\n      return fenceOpenInside;\n    }\n\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingSequence);\n      return self.interrupt ? ok(code) : headingBreak(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function headingBreak(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.atxHeadingSequence);\n      return sequence(code);\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.atxHeading);\n      return ok(code);\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, types.whitespace)(code);\n    }\n\n    effects.enter(types.atxHeadingText);\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === codes.numberSign) {\n      effects.consume(code);\n      return sequence;\n    }\n\n    effects.exit(types.atxHeadingSequence);\n    return headingBreak(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === codes.eof || code === codes.numberSign || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingText);\n      return headingBreak(code);\n    }\n\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","splice","codes","constants","types","headingAtx","name","tokenize","tokenizeHeadingAtx","resolve","resolveHeadingAtx","events","context","contentEnd","length","contentStart","content","text","type","whitespace","atxHeadingSequence","atxHeadingText","start","end","chunkText","contentType","contentTypeText","effects","nok","self","size","code","numberSign","enter","atxHeading","fenceOpenInside","atxHeadingOpeningFenceSizeMax","consume","eof","exit","interrupt","headingBreak","sequence","data"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-core-commonmark/dev/lib/heading-atx.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === types.whitespace) {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === types.whitespace\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === types.atxHeadingSequence &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === types.whitespace))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: types.atxHeadingText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: types.chunkText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: constants.contentTypeText\n    }\n\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.numberSign, 'expected `#`')\n    effects.enter(types.atxHeading)\n    effects.enter(types.atxHeadingSequence)\n    return fenceOpenInside(code)\n  }\n\n  /** @type {State} */\n  function fenceOpenInside(code) {\n    if (\n      code === codes.numberSign &&\n      size++ < constants.atxHeadingOpeningFenceSizeMax\n    ) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingSequence)\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function headingBreak(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.atxHeadingSequence)\n      return sequence(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.atxHeading)\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, types.whitespace)(code)\n    }\n\n    effects.enter(types.atxHeadingText)\n    return data(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === codes.numberSign) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit(types.atxHeadingSequence)\n    return headingBreak(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.numberSign ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit(types.atxHeadingText)\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}