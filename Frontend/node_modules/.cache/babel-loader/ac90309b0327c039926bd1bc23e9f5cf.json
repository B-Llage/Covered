{"ast":null,"code":"import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  } // Reference.\n\n\n  const head = $2.charCodeAt(0);\n\n  if (head === codes.numberSign) {\n    const head = $2.charCodeAt(1);\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal);\n  }\n\n  return decodeNamedCharacterReference($2) || $0;\n}","map":{"version":3,"names":["decodeNamedCharacterReference","decodeNumericCharacterReference","codes","constants","characterEscapeOrReference","decodeString","value","replace","decode","$0","$1","$2","head","charCodeAt","numberSign","hex","lowercaseX","uppercaseX","slice","numericBaseHexadecimal","numericBaseDecimal"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-util-decode-string/dev/index.js"],"sourcesContent":["import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\n\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n\n  if (head === codes.numberSign) {\n    const head = $2.charCodeAt(1)\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX\n    return decodeNumericCharacterReference(\n      $2.slice(hex ? 2 : 1),\n      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal\n    )\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n"],"mappings":"AAAA,SAAQA,6BAAR,QAA4C,kCAA5C;AACA,SAAQC,+BAAR,QAA8C,mDAA9C;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AAEA,MAAMC,0BAA0B,GAC9B,mEADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EAClC,OAAOA,KAAK,CAACC,OAAN,CAAcH,0BAAd,EAA0CI,MAA1C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,MAAT,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;EAC1B,IAAID,EAAJ,EAAQ;IACN;IACA,OAAOA,EAAP;EACD,CAJyB,CAM1B;;;EACA,MAAME,IAAI,GAAGD,EAAE,CAACE,UAAH,CAAc,CAAd,CAAb;;EAEA,IAAID,IAAI,KAAKV,KAAK,CAACY,UAAnB,EAA+B;IAC7B,MAAMF,IAAI,GAAGD,EAAE,CAACE,UAAH,CAAc,CAAd,CAAb;IACA,MAAME,GAAG,GAAGH,IAAI,KAAKV,KAAK,CAACc,UAAf,IAA6BJ,IAAI,KAAKV,KAAK,CAACe,UAAxD;IACA,OAAOhB,+BAA+B,CACpCU,EAAE,CAACO,KAAH,CAASH,GAAG,GAAG,CAAH,GAAO,CAAnB,CADoC,EAEpCA,GAAG,GAAGZ,SAAS,CAACgB,sBAAb,GAAsChB,SAAS,CAACiB,kBAFf,CAAtC;EAID;;EAED,OAAOpB,6BAA6B,CAACW,EAAD,CAA7B,IAAqCF,EAA5C;AACD"},"metadata":{},"sourceType":"module"}