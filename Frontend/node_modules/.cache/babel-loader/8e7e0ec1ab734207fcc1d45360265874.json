{"ast":null,"code":"import { codes } from 'micromark-util-symbol/codes.js';\nimport { values } from 'micromark-util-symbol/values.js';\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\n\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space\n  code < codes.ht || code === codes.vt || code > codes.cr && code < codes.space || // Control character (DEL) of the basic block and C1 controls.\n  code > codes.tilde && code < 160 || // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 || // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n  code > 1114111) {\n    return values.replacementCharacter;\n  }\n\n  return String.fromCharCode(code);\n}","map":{"version":3,"names":["codes","values","decodeNumericCharacterReference","value","base","code","Number","parseInt","ht","vt","cr","space","tilde","replacementCharacter","String","fromCharCode"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js"],"sourcesContent":["import {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < codes.ht ||\n    code === codes.vt ||\n    (code > codes.cr && code < codes.space) ||\n    // Control character (DEL) of the basic block and C1 controls.\n    (code > codes.tilde && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 ||\n    // Out of range\n    code > 1114111\n  ) {\n    return values.replacementCharacter\n  }\n\n  return String.fromCharCode(code)\n}\n"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gCAApB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,KAAzC,EAAgDC,IAAhD,EAAsD;EAC3D,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,EAAuBC,IAAvB,CAAb;;EAEA,KACE;EACAC,IAAI,GAAGL,KAAK,CAACQ,EAAb,IACAH,IAAI,KAAKL,KAAK,CAACS,EADf,IAECJ,IAAI,GAAGL,KAAK,CAACU,EAAb,IAAmBL,IAAI,GAAGL,KAAK,CAACW,KAFjC,IAGA;EACCN,IAAI,GAAGL,KAAK,CAACY,KAAb,IAAsBP,IAAI,GAAG,GAJ9B,IAKA;EACCA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KANxB,IAOA;EACCA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KARxB,IASA,CAACA,IAAI,GAAG,KAAR,MAAmB,KATnB,IAUA,CAACA,IAAI,GAAG,KAAR,MAAmB,KAVnB,IAWA;EACAA,IAAI,GAAG,OAdT,EAeE;IACA,OAAOJ,MAAM,CAACY,oBAAd;EACD;;EAED,OAAOC,MAAM,CAACC,YAAP,CAAoBV,IAApB,CAAP;AACD"},"metadata":{},"sourceType":"module"}