{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {InitialConstruct} */\n\nexport const content = {\n  tokenize: initializeContent\n};\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n\n  let previous;\n  return contentStart;\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, contentStart, types.linePrefix);\n  }\n  /** @type {State} */\n\n\n  function paragraphInitial(code) {\n    assert(code !== codes.eof && !markdownLineEnding(code), 'expected anything other than a line ending or EOF');\n    effects.enter(types.paragraph);\n    return lineStart(code);\n  }\n  /** @type {State} */\n\n\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText);\n      effects.exit(types.paragraph);\n      effects.consume(code);\n      return;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(types.chunkText);\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","codes","constants","types","content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","eof","consume","enter","lineEnding","exit","linePrefix","paragraph","lineStart","token","chunkText","contentType","contentTypeText","next","data"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark/dev/lib/initialize/content.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {InitialConstruct} */\nexport const content = {tokenize: initializeContent}\n\n/** @type {Initializer} */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, contentStart, types.linePrefix)\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected anything other than a line ending or EOF'\n    )\n    effects.enter(types.paragraph)\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText)\n      effects.exit(types.paragraph)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit(types.chunkText)\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,OAAO,GAAG;EAACC,QAAQ,EAAEC;AAAX,CAAhB;AAEP;;AACA,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;EAClC,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAR,CACnB,KAAKC,MAAL,CAAYC,UAAZ,CAAuBC,cADJ,EAEnBC,0BAFmB,EAGnBC,gBAHmB,CAArB;EAKA;;EACA,IAAIC,QAAJ;EAEA,OAAOP,YAAP;EAEA;;EACA,SAASK,0BAAT,CAAoCG,IAApC,EAA0C;IACxClB,MAAM,CACJkB,IAAI,KAAKf,KAAK,CAACgB,GAAf,IAAsBjB,kBAAkB,CAACgB,IAAD,CADpC,EAEJ,qBAFI,CAAN;;IAKA,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAnB,EAAwB;MACtBV,OAAO,CAACW,OAAR,CAAgBF,IAAhB;MACA;IACD;;IAEDT,OAAO,CAACY,KAAR,CAAchB,KAAK,CAACiB,UAApB;IACAb,OAAO,CAACW,OAAR,CAAgBF,IAAhB;IACAT,OAAO,CAACc,IAAR,CAAalB,KAAK,CAACiB,UAAnB;IACA,OAAOrB,YAAY,CAACQ,OAAD,EAAUC,YAAV,EAAwBL,KAAK,CAACmB,UAA9B,CAAnB;EACD;EAED;;;EACA,SAASR,gBAAT,CAA0BE,IAA1B,EAAgC;IAC9BlB,MAAM,CACJkB,IAAI,KAAKf,KAAK,CAACgB,GAAf,IAAsB,CAACjB,kBAAkB,CAACgB,IAAD,CADrC,EAEJ,mDAFI,CAAN;IAIAT,OAAO,CAACY,KAAR,CAAchB,KAAK,CAACoB,SAApB;IACA,OAAOC,SAAS,CAACR,IAAD,CAAhB;EACD;EAED;;;EACA,SAASQ,SAAT,CAAmBR,IAAnB,EAAyB;IACvB,MAAMS,KAAK,GAAGlB,OAAO,CAACY,KAAR,CAAchB,KAAK,CAACuB,SAApB,EAA+B;MAC3CC,WAAW,EAAEzB,SAAS,CAAC0B,eADoB;MAE3Cb;IAF2C,CAA/B,CAAd;;IAKA,IAAIA,QAAJ,EAAc;MACZA,QAAQ,CAACc,IAAT,GAAgBJ,KAAhB;IACD;;IAEDV,QAAQ,GAAGU,KAAX;IAEA,OAAOK,IAAI,CAACd,IAAD,CAAX;EACD;EAED;;;EACA,SAASc,IAAT,CAAcd,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAnB,EAAwB;MACtBV,OAAO,CAACc,IAAR,CAAalB,KAAK,CAACuB,SAAnB;MACAnB,OAAO,CAACc,IAAR,CAAalB,KAAK,CAACoB,SAAnB;MACAhB,OAAO,CAACW,OAAR,CAAgBF,IAAhB;MACA;IACD;;IAED,IAAIhB,kBAAkB,CAACgB,IAAD,CAAtB,EAA8B;MAC5BT,OAAO,CAACW,OAAR,CAAgBF,IAAhB;MACAT,OAAO,CAACc,IAAR,CAAalB,KAAK,CAACuB,SAAnB;MACA,OAAOF,SAAP;IACD,CAZiB,CAclB;;;IACAjB,OAAO,CAACW,OAAR,CAAgBF,IAAhB;IACA,OAAOc,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}