{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.hardBreakEscape);\n    effects.enter(types.escapeMarker);\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.escapeMarker);\n      effects.exit(types.hardBreakEscape);\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","codes","types","hardBreakEscape","name","tokenize","tokenizeHardBreakEscape","effects","nok","start","code","backslash","enter","escapeMarker","consume","open","exit"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.hardBreakEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.escapeMarker)\n      effects.exit(types.hardBreakEscape)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBADuB;EAE7BC,QAAQ,EAAEC;AAFmB,CAAxB;AAKP;;AACA,SAASA,uBAAT,CAAiCC,OAAjC,EAA0CT,EAA1C,EAA8CU,GAA9C,EAAmD;EACjD,OAAOC,KAAP;EAEA;;EACA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBX,MAAM,CAACW,IAAI,KAAKT,KAAK,CAACU,SAAhB,EAA2B,eAA3B,CAAN;IACAJ,OAAO,CAACK,KAAR,CAAcV,KAAK,CAACC,eAApB;IACAI,OAAO,CAACK,KAAR,CAAcV,KAAK,CAACW,YAApB;IACAN,OAAO,CAACO,OAAR,CAAgBJ,IAAhB;IACA,OAAOK,IAAP;EACD;EAED;;;EACA,SAASA,IAAT,CAAcL,IAAd,EAAoB;IAClB,IAAIV,kBAAkB,CAACU,IAAD,CAAtB,EAA8B;MAC5BH,OAAO,CAACS,IAAR,CAAad,KAAK,CAACW,YAAnB;MACAN,OAAO,CAACS,IAAR,CAAad,KAAK,CAACC,eAAnB;MACA,OAAOL,EAAE,CAACY,IAAD,CAAT;IACD;;IAED,OAAOF,GAAG,CAACE,IAAD,CAAV;EACD;AACF"},"metadata":{},"sourceType":"module"}