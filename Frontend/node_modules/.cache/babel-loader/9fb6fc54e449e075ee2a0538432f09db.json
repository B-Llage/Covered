{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { blankLine } from './blank-line.js';\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n};\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === types.htmlFlow) {\n      break;\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.\n\n    events.splice(index - 2, 2);\n  }\n\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n\n  let kind;\n  /** @type {boolean} */\n\n  let startTag;\n  /** @type {string} */\n\n  let buffer;\n  /** @type {number} */\n\n  let index;\n  /** @type {Code} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.htmlFlow);\n    effects.enter(types.htmlFlowData);\n    effects.consume(code);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code);\n      return declarationStart;\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code);\n      kind = constants.htmlInstruction; // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      startTag = true;\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function declarationStart(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      kind = constants.htmlComment;\n      return commentOpenInside;\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code);\n      kind = constants.htmlCdata;\n      buffer = constants.cdataOpeningString;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      kind = constants.htmlDeclaration;\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === buffer.length ? self.interrupt ? ok : continuation : cdataOpenInside;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function tagName(code) {\n    if (code === codes.eof || code === codes.slash || code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      if (code !== codes.slash && startTag && htmlRawNames.includes(buffer.toLowerCase())) {\n        kind = constants.htmlRaw;\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = constants.htmlBasic;\n\n        if (code === codes.slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n\n      kind = constants.htmlComplete; // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);\n    }\n\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuation;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n\n    return completeEnd(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n\n    return completeEnd(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeName(code) {\n    if (code === codes.dash || code === codes.dot || code === codes.colon || code === codes.underscore || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n\n    return completeAttributeNameAfter(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n\n    return completeAttributeNameBefore(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueBefore(code) {\n    if (code === codes.eof || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent) {\n      return nok(code);\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code);\n      marker = code;\n      return completeAttributeValueQuoted;\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n\n    marker = null;\n    return completeAttributeValueUnquoted(code);\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueQuoted(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    if (code === marker) {\n      effects.consume(code);\n      return completeAttributeValueQuotedAfter;\n    }\n\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueUnquoted(code) {\n    if (code === codes.eof || code === codes.quotationMark || code === codes.apostrophe || code === codes.lessThan || code === codes.equalsTo || code === codes.greaterThan || code === codes.graveAccent || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n  /** @type {State} */\n\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === codes.slash || code === codes.greaterThan || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      return completeAfter;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n\n    return code === codes.eof || markdownLineEnding(code) ? continuation(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function continuation(code) {\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n\n    if (code === codes.lessThan && kind === constants.htmlRaw) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n\n    if (code === codes.greaterThan && kind === constants.htmlDeclaration) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    if (code === codes.questionMark && kind === constants.htmlInstruction) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    if (code === codes.rightSquareBracket && kind === constants.htmlCdata) {\n      effects.consume(code);\n      return continuationCharacterDataInside;\n    }\n\n    if (markdownLineEnding(code) && (kind === constants.htmlBasic || kind === constants.htmlComplete)) {\n      return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code);\n    }\n\n    effects.consume(code);\n    return continuation;\n  }\n  /** @type {State} */\n\n\n  function continuationAtLineEnding(code) {\n    effects.exit(types.htmlFlowData);\n    return htmlContinueStart(code);\n  }\n  /** @type {State} */\n\n\n  function htmlContinueStart(code) {\n    if (code === codes.eof) {\n      return done(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt({\n        tokenize: htmlLineEnd,\n        partial: true\n      }, htmlContinueStart, done)(code);\n    }\n\n    effects.enter(types.htmlFlowData);\n    return continuation(code);\n  }\n  /** @type {Tokenizer} */\n\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      assert(markdownLineEnding(code), 'expected eol');\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return lineStart;\n    }\n    /** @type {State} */\n\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n  }\n  /** @type {State} */\n\n\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationRawEndTag(code) {\n    if (code === codes.greaterThan && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationCharacterDataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code);\n      return continuationClose;\n    } // More dashes.\n\n\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n\n    return continuation(code);\n  }\n  /** @type {State} */\n\n\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData);\n      return done(code);\n    }\n\n    effects.consume(code);\n    return continuationClose;\n  }\n  /** @type {State} */\n\n\n  function done(code) {\n    effects.exit(types.htmlFlow);\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending');\n    effects.exit(types.htmlFlowData);\n    effects.enter(types.lineEndingBlank);\n    effects.consume(code);\n    effects.exit(types.lineEndingBlank);\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","map":{"version":3,"names":["ok","assert","asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","htmlBlockNames","htmlRawNames","codes","constants","types","blankLine","htmlFlow","name","tokenize","tokenizeHtmlFlow","resolveTo","resolveToHtmlFlow","concrete","nextBlankConstruct","tokenizeNextBlank","partial","events","index","length","type","linePrefix","start","splice","effects","nok","self","kind","startTag","buffer","marker","code","lessThan","enter","htmlFlowData","consume","open","exclamationMark","declarationStart","slash","tagCloseStart","questionMark","htmlInstruction","interrupt","continuationDeclarationInside","String","fromCharCode","tagName","dash","htmlComment","commentOpenInside","leftSquareBracket","htmlCdata","cdataOpeningString","cdataOpenInside","htmlDeclaration","charCodeAt","continuation","eof","greaterThan","includes","toLowerCase","htmlRaw","htmlBasic","basicSelfClosing","htmlComplete","parser","lazy","now","line","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","colon","underscore","completeAttributeName","dot","completeAttributeNameAfter","equalsTo","completeAttributeValueBefore","graveAccent","quotationMark","apostrophe","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","rightSquareBracket","continuationCharacterDataInside","check","continuationAtLineEnding","exit","htmlContinueStart","done","attempt","htmlLineEnd","lineEnding","lineStart","continuationRawEndTag","htmlRawSizeMax","lineEndingBlank"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-core-commonmark/dev/lib/html-flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst nextBlankConstruct = {tokenize: tokenizeNextBlank, partial: true}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === types.htmlFlow\n    ) {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let kind\n  /** @type {boolean} */\n  let startTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlFlow)\n    effects.enter(types.htmlFlowData)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      kind = constants.htmlInstruction\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function declarationStart(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      kind = constants.htmlComment\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      kind = constants.htmlCdata\n      buffer = constants.cdataOpeningString\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = constants.htmlDeclaration\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagName(code) {\n    if (\n      code === codes.eof ||\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== codes.slash &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = constants.htmlRaw\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = constants.htmlBasic\n\n        if (code === codes.slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = constants.htmlComplete\n      // Do not support complete HTML when interrupting\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeName(code) {\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeValueQuoted(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /** @type {State} */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /** @type {State} */\n  function completeAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownSpace(code)\n    ) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === codes.eof || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function continuation(code) {\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === codes.lessThan && kind === constants.htmlRaw) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === codes.greaterThan && kind === constants.htmlDeclaration) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === codes.questionMark && kind === constants.htmlInstruction) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === codes.rightSquareBracket && kind === constants.htmlCdata) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (\n      markdownLineEnding(code) &&\n      (kind === constants.htmlBasic || kind === constants.htmlComplete)\n    ) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n\n  /** @type {State} */\n  function continuationAtLineEnding(code) {\n    effects.exit(types.htmlFlowData)\n    return htmlContinueStart(code)\n  }\n\n  /** @type {State} */\n  function htmlContinueStart(code) {\n    if (code === codes.eof) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {tokenize: htmlLineEnd, partial: true},\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter(types.htmlFlowData)\n    return continuation(code)\n  }\n\n  /** @type {Tokenizer} */\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return lineStart\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n\n  /** @type {State} */\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationRawEndTag(code) {\n    if (\n      code === codes.greaterThan &&\n      htmlRawNames.includes(buffer.toLowerCase())\n    ) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationCharacterDataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /** @type {State} */\n  function done(code) {\n    effects.exit(types.htmlFlow)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.exit(types.htmlFlowData)\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SACEC,UADF,EAEEC,iBAFF,EAGEC,kBAHF,EAIEC,yBAJF,EAKEC,aALF,QAMO,0BANP;AAOA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,8BAA3C;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,IAAI,EAAE,UADgB;EAEtBC,QAAQ,EAAEC,gBAFY;EAGtBC,SAAS,EAAEC,iBAHW;EAItBC,QAAQ,EAAE;AAJY,CAAjB;AAOP;;AACA,MAAMC,kBAAkB,GAAG;EAACL,QAAQ,EAAEM,iBAAX;EAA8BC,OAAO,EAAE;AAAvC,CAA3B;AAEA;;AACA,SAASJ,iBAAT,CAA2BK,MAA3B,EAAmC;EACjC,IAAIC,KAAK,GAAGD,MAAM,CAACE,MAAnB;;EAEA,OAAOD,KAAK,EAAZ,EAAgB;IACd,IACED,MAAM,CAACC,KAAD,CAAN,CAAc,CAAd,MAAqB,OAArB,IACAD,MAAM,CAACC,KAAD,CAAN,CAAc,CAAd,EAAiBE,IAAjB,KAA0Bf,KAAK,CAACE,QAFlC,EAGE;MACA;IACD;EACF;;EAED,IAAIW,KAAK,GAAG,CAAR,IAAaD,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBE,IAArB,KAA8Bf,KAAK,CAACgB,UAArD,EAAiE;IAC/D;IACAJ,MAAM,CAACC,KAAD,CAAN,CAAc,CAAd,EAAiBI,KAAjB,GAAyBL,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBI,KAA9C,CAF+D,CAG/D;;IACAL,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBI,KAArB,GAA6BL,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBI,KAAlD,CAJ+D,CAK/D;;IACAL,MAAM,CAACM,MAAP,CAAcL,KAAK,GAAG,CAAtB,EAAyB,CAAzB;EACD;;EAED,OAAOD,MAAP;AACD;AAED;;;AACA,SAASP,gBAAT,CAA0Bc,OAA1B,EAAmC9B,EAAnC,EAAuC+B,GAAvC,EAA4C;EAC1C,MAAMC,IAAI,GAAG,IAAb;EACA;;EACA,IAAIC,IAAJ;EACA;;EACA,IAAIC,QAAJ;EACA;;EACA,IAAIC,MAAJ;EACA;;EACA,IAAIX,KAAJ;EACA;;EACA,IAAIY,MAAJ;EAEA,OAAOR,KAAP;EAEA;;EACA,SAASA,KAAT,CAAeS,IAAf,EAAqB;IACnBpC,MAAM,CAACoC,IAAI,KAAK5B,KAAK,CAAC6B,QAAhB,EAA0B,cAA1B,CAAN;IACAR,OAAO,CAACS,KAAR,CAAc5B,KAAK,CAACE,QAApB;IACAiB,OAAO,CAACS,KAAR,CAAc5B,KAAK,CAAC6B,YAApB;IACAV,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACA,OAAOK,IAAP;EACD;EAED;;;EACA,SAASA,IAAT,CAAcL,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAK5B,KAAK,CAACkC,eAAnB,EAAoC;MAClCb,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOO,gBAAP;IACD;;IAED,IAAIP,IAAI,KAAK5B,KAAK,CAACoC,KAAnB,EAA0B;MACxBf,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOS,aAAP;IACD;;IAED,IAAIT,IAAI,KAAK5B,KAAK,CAACsC,YAAnB,EAAiC;MAC/BjB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAJ,IAAI,GAAGvB,SAAS,CAACsC,eAAjB,CAF+B,CAG/B;MACA;;MACA,OAAOhB,IAAI,CAACiB,SAAL,GAAiBjD,EAAjB,GAAsBkD,6BAA7B;IACD;;IAED,IAAIhD,UAAU,CAACmC,IAAD,CAAd,EAAsB;MACpBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAF,MAAM,GAAGgB,MAAM,CAACC,YAAP,CAAoBf,IAApB,CAAT;MACAH,QAAQ,GAAG,IAAX;MACA,OAAOmB,OAAP;IACD;;IAED,OAAOtB,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASO,gBAAT,CAA0BP,IAA1B,EAAgC;IAC9B,IAAIA,IAAI,KAAK5B,KAAK,CAAC6C,IAAnB,EAAyB;MACvBxB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAJ,IAAI,GAAGvB,SAAS,CAAC6C,WAAjB;MACA,OAAOC,iBAAP;IACD;;IAED,IAAInB,IAAI,KAAK5B,KAAK,CAACgD,iBAAnB,EAAsC;MACpC3B,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAJ,IAAI,GAAGvB,SAAS,CAACgD,SAAjB;MACAvB,MAAM,GAAGzB,SAAS,CAACiD,kBAAnB;MACAnC,KAAK,GAAG,CAAR;MACA,OAAOoC,eAAP;IACD;;IAED,IAAI1D,UAAU,CAACmC,IAAD,CAAd,EAAsB;MACpBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAJ,IAAI,GAAGvB,SAAS,CAACmD,eAAjB;MACA,OAAO7B,IAAI,CAACiB,SAAL,GAAiBjD,EAAjB,GAAsBkD,6BAA7B;IACD;;IAED,OAAOnB,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASmB,iBAAT,CAA2BnB,IAA3B,EAAiC;IAC/B,IAAIA,IAAI,KAAK5B,KAAK,CAAC6C,IAAnB,EAAyB;MACvBxB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOL,IAAI,CAACiB,SAAL,GAAiBjD,EAAjB,GAAsBkD,6BAA7B;IACD;;IAED,OAAOnB,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASuB,eAAT,CAAyBvB,IAAzB,EAA+B;IAC7B,IAAIA,IAAI,KAAKF,MAAM,CAAC2B,UAAP,CAAkBtC,KAAK,EAAvB,CAAb,EAAyC;MACvCM,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOb,KAAK,KAAKW,MAAM,CAACV,MAAjB,GACHO,IAAI,CAACiB,SAAL,GACEjD,EADF,GAEE+D,YAHC,GAIHH,eAJJ;IAKD;;IAED,OAAO7B,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASS,aAAT,CAAuBT,IAAvB,EAA6B;IAC3B,IAAInC,UAAU,CAACmC,IAAD,CAAd,EAAsB;MACpBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAF,MAAM,GAAGgB,MAAM,CAACC,YAAP,CAAoBf,IAApB,CAAT;MACA,OAAOgB,OAAP;IACD;;IAED,OAAOtB,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASgB,OAAT,CAAiBhB,IAAjB,EAAuB;IACrB,IACEA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IACA3B,IAAI,KAAK5B,KAAK,CAACoC,KADf,IAEAR,IAAI,KAAK5B,KAAK,CAACwD,WAFf,IAGA5D,yBAAyB,CAACgC,IAAD,CAJ3B,EAKE;MACA,IACEA,IAAI,KAAK5B,KAAK,CAACoC,KAAf,IACAX,QADA,IAEA1B,YAAY,CAAC0D,QAAb,CAAsB/B,MAAM,CAACgC,WAAP,EAAtB,CAHF,EAIE;QACAlC,IAAI,GAAGvB,SAAS,CAAC0D,OAAjB;QACA,OAAOpC,IAAI,CAACiB,SAAL,GAAiBjD,EAAE,CAACqC,IAAD,CAAnB,GAA4B0B,YAAY,CAAC1B,IAAD,CAA/C;MACD;;MAED,IAAI9B,cAAc,CAAC2D,QAAf,CAAwB/B,MAAM,CAACgC,WAAP,EAAxB,CAAJ,EAAmD;QACjDlC,IAAI,GAAGvB,SAAS,CAAC2D,SAAjB;;QAEA,IAAIhC,IAAI,KAAK5B,KAAK,CAACoC,KAAnB,EAA0B;UACxBf,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;UACA,OAAOiC,gBAAP;QACD;;QAED,OAAOtC,IAAI,CAACiB,SAAL,GAAiBjD,EAAE,CAACqC,IAAD,CAAnB,GAA4B0B,YAAY,CAAC1B,IAAD,CAA/C;MACD;;MAEDJ,IAAI,GAAGvB,SAAS,CAAC6D,YAAjB,CArBA,CAsBA;;MACA,OAAOvC,IAAI,CAACiB,SAAL,IAAkB,CAACjB,IAAI,CAACwC,MAAL,CAAYC,IAAZ,CAAiBzC,IAAI,CAAC0C,GAAL,GAAWC,IAA5B,CAAnB,GACH5C,GAAG,CAACM,IAAD,CADA,GAEHH,QAAQ,GACR0C,2BAA2B,CAACvC,IAAD,CADnB,GAERwC,uBAAuB,CAACxC,IAAD,CAJ3B;IAKD;;IAED,IAAIA,IAAI,KAAK5B,KAAK,CAAC6C,IAAf,IAAuBnD,iBAAiB,CAACkC,IAAD,CAA5C,EAAoD;MAClDP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAF,MAAM,IAAIgB,MAAM,CAACC,YAAP,CAAoBf,IAApB,CAAV;MACA,OAAOgB,OAAP;IACD;;IAED,OAAOtB,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASiC,gBAAT,CAA0BjC,IAA1B,EAAgC;IAC9B,IAAIA,IAAI,KAAK5B,KAAK,CAACwD,WAAnB,EAAgC;MAC9BnC,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOL,IAAI,CAACiB,SAAL,GAAiBjD,EAAjB,GAAsB+D,YAA7B;IACD;;IAED,OAAOhC,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASwC,uBAAT,CAAiCxC,IAAjC,EAAuC;IACrC,IAAI/B,aAAa,CAAC+B,IAAD,CAAjB,EAAyB;MACvBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOwC,uBAAP;IACD;;IAED,OAAOC,WAAW,CAACzC,IAAD,CAAlB;EACD;EAED;;;EACA,SAASuC,2BAAT,CAAqCvC,IAArC,EAA2C;IACzC,IAAIA,IAAI,KAAK5B,KAAK,CAACoC,KAAnB,EAA0B;MACxBf,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOyC,WAAP;IACD;;IAED,IAAIzC,IAAI,KAAK5B,KAAK,CAACsE,KAAf,IAAwB1C,IAAI,KAAK5B,KAAK,CAACuE,UAAvC,IAAqD9E,UAAU,CAACmC,IAAD,CAAnE,EAA2E;MACzEP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO4C,qBAAP;IACD;;IAED,IAAI3E,aAAa,CAAC+B,IAAD,CAAjB,EAAyB;MACvBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOuC,2BAAP;IACD;;IAED,OAAOE,WAAW,CAACzC,IAAD,CAAlB;EACD;EAED;;;EACA,SAAS4C,qBAAT,CAA+B5C,IAA/B,EAAqC;IACnC,IACEA,IAAI,KAAK5B,KAAK,CAAC6C,IAAf,IACAjB,IAAI,KAAK5B,KAAK,CAACyE,GADf,IAEA7C,IAAI,KAAK5B,KAAK,CAACsE,KAFf,IAGA1C,IAAI,KAAK5B,KAAK,CAACuE,UAHf,IAIA7E,iBAAiB,CAACkC,IAAD,CALnB,EAME;MACAP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO4C,qBAAP;IACD;;IAED,OAAOE,0BAA0B,CAAC9C,IAAD,CAAjC;EACD;EAED;;;EACA,SAAS8C,0BAAT,CAAoC9C,IAApC,EAA0C;IACxC,IAAIA,IAAI,KAAK5B,KAAK,CAAC2E,QAAnB,EAA6B;MAC3BtD,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOgD,4BAAP;IACD;;IAED,IAAI/E,aAAa,CAAC+B,IAAD,CAAjB,EAAyB;MACvBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO8C,0BAAP;IACD;;IAED,OAAOP,2BAA2B,CAACvC,IAAD,CAAlC;EACD;EAED;;;EACA,SAASgD,4BAAT,CAAsChD,IAAtC,EAA4C;IAC1C,IACEA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IACA3B,IAAI,KAAK5B,KAAK,CAAC6B,QADf,IAEAD,IAAI,KAAK5B,KAAK,CAAC2E,QAFf,IAGA/C,IAAI,KAAK5B,KAAK,CAACwD,WAHf,IAIA5B,IAAI,KAAK5B,KAAK,CAAC6E,WALjB,EAME;MACA,OAAOvD,GAAG,CAACM,IAAD,CAAV;IACD;;IAED,IAAIA,IAAI,KAAK5B,KAAK,CAAC8E,aAAf,IAAgClD,IAAI,KAAK5B,KAAK,CAAC+E,UAAnD,EAA+D;MAC7D1D,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAD,MAAM,GAAGC,IAAT;MACA,OAAOoD,4BAAP;IACD;;IAED,IAAInF,aAAa,CAAC+B,IAAD,CAAjB,EAAyB;MACvBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOgD,4BAAP;IACD;;IAEDjD,MAAM,GAAG,IAAT;IACA,OAAOsD,8BAA8B,CAACrD,IAAD,CAArC;EACD;EAED;;;EACA,SAASoD,4BAAT,CAAsCpD,IAAtC,EAA4C;IAC1C,IAAIA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IAAsB5D,kBAAkB,CAACiC,IAAD,CAA5C,EAAoD;MAClD,OAAON,GAAG,CAACM,IAAD,CAAV;IACD;;IAED,IAAIA,IAAI,KAAKD,MAAb,EAAqB;MACnBN,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOsD,iCAAP;IACD;;IAED7D,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACA,OAAOoD,4BAAP;EACD;EAED;;;EACA,SAASC,8BAAT,CAAwCrD,IAAxC,EAA8C;IAC5C,IACEA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IACA3B,IAAI,KAAK5B,KAAK,CAAC8E,aADf,IAEAlD,IAAI,KAAK5B,KAAK,CAAC+E,UAFf,IAGAnD,IAAI,KAAK5B,KAAK,CAAC6B,QAHf,IAIAD,IAAI,KAAK5B,KAAK,CAAC2E,QAJf,IAKA/C,IAAI,KAAK5B,KAAK,CAACwD,WALf,IAMA5B,IAAI,KAAK5B,KAAK,CAAC6E,WANf,IAOAjF,yBAAyB,CAACgC,IAAD,CAR3B,EASE;MACA,OAAO8C,0BAA0B,CAAC9C,IAAD,CAAjC;IACD;;IAEDP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACA,OAAOqD,8BAAP;EACD;EAED;;;EACA,SAASC,iCAAT,CAA2CtD,IAA3C,EAAiD;IAC/C,IACEA,IAAI,KAAK5B,KAAK,CAACoC,KAAf,IACAR,IAAI,KAAK5B,KAAK,CAACwD,WADf,IAEA3D,aAAa,CAAC+B,IAAD,CAHf,EAIE;MACA,OAAOuC,2BAA2B,CAACvC,IAAD,CAAlC;IACD;;IAED,OAAON,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASyC,WAAT,CAAqBzC,IAArB,EAA2B;IACzB,IAAIA,IAAI,KAAK5B,KAAK,CAACwD,WAAnB,EAAgC;MAC9BnC,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOuD,aAAP;IACD;;IAED,OAAO7D,GAAG,CAACM,IAAD,CAAV;EACD;EAED;;;EACA,SAASuD,aAAT,CAAuBvD,IAAvB,EAA6B;IAC3B,IAAI/B,aAAa,CAAC+B,IAAD,CAAjB,EAAyB;MACvBP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOuD,aAAP;IACD;;IAED,OAAOvD,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IAAsB5D,kBAAkB,CAACiC,IAAD,CAAxC,GACH0B,YAAY,CAAC1B,IAAD,CADT,GAEHN,GAAG,CAACM,IAAD,CAFP;EAGD;EAED;;;EACA,SAAS0B,YAAT,CAAsB1B,IAAtB,EAA4B;IAC1B,IAAIA,IAAI,KAAK5B,KAAK,CAAC6C,IAAf,IAAuBrB,IAAI,KAAKvB,SAAS,CAAC6C,WAA9C,EAA2D;MACzDzB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOwD,yBAAP;IACD;;IAED,IAAIxD,IAAI,KAAK5B,KAAK,CAAC6B,QAAf,IAA2BL,IAAI,KAAKvB,SAAS,CAAC0D,OAAlD,EAA2D;MACzDtC,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOyD,sBAAP;IACD;;IAED,IAAIzD,IAAI,KAAK5B,KAAK,CAACwD,WAAf,IAA8BhC,IAAI,KAAKvB,SAAS,CAACmD,eAArD,EAAsE;MACpE/B,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO0D,iBAAP;IACD;;IAED,IAAI1D,IAAI,KAAK5B,KAAK,CAACsC,YAAf,IAA+Bd,IAAI,KAAKvB,SAAS,CAACsC,eAAtD,EAAuE;MACrElB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOa,6BAAP;IACD;;IAED,IAAIb,IAAI,KAAK5B,KAAK,CAACuF,kBAAf,IAAqC/D,IAAI,KAAKvB,SAAS,CAACgD,SAA5D,EAAuE;MACrE5B,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO4D,+BAAP;IACD;;IAED,IACE7F,kBAAkB,CAACiC,IAAD,CAAlB,KACCJ,IAAI,KAAKvB,SAAS,CAAC2D,SAAnB,IAAgCpC,IAAI,KAAKvB,SAAS,CAAC6D,YADpD,CADF,EAGE;MACA,OAAOzC,OAAO,CAACoE,KAAR,CACL9E,kBADK,EAEL2E,iBAFK,EAGLI,wBAHK,EAIL9D,IAJK,CAAP;IAKD;;IAED,IAAIA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IAAsB5D,kBAAkB,CAACiC,IAAD,CAA5C,EAAoD;MAClD,OAAO8D,wBAAwB,CAAC9D,IAAD,CAA/B;IACD;;IAEDP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACA,OAAO0B,YAAP;EACD;EAED;;;EACA,SAASoC,wBAAT,CAAkC9D,IAAlC,EAAwC;IACtCP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAAC6B,YAAnB;IACA,OAAO6D,iBAAiB,CAAChE,IAAD,CAAxB;EACD;EAED;;;EACA,SAASgE,iBAAT,CAA2BhE,IAA3B,EAAiC;IAC/B,IAAIA,IAAI,KAAK5B,KAAK,CAACuD,GAAnB,EAAwB;MACtB,OAAOsC,IAAI,CAACjE,IAAD,CAAX;IACD;;IAED,IAAIjC,kBAAkB,CAACiC,IAAD,CAAtB,EAA8B;MAC5B,OAAOP,OAAO,CAACyE,OAAR,CACL;QAACxF,QAAQ,EAAEyF,WAAX;QAAwBlF,OAAO,EAAE;MAAjC,CADK,EAEL+E,iBAFK,EAGLC,IAHK,EAILjE,IAJK,CAAP;IAKD;;IAEDP,OAAO,CAACS,KAAR,CAAc5B,KAAK,CAAC6B,YAApB;IACA,OAAOuB,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAASmE,WAAT,CAAqB1E,OAArB,EAA8B9B,EAA9B,EAAkC+B,GAAlC,EAAuC;IACrC,OAAOH,KAAP;IAEA;;IACA,SAASA,KAAT,CAAeS,IAAf,EAAqB;MACnBpC,MAAM,CAACG,kBAAkB,CAACiC,IAAD,CAAnB,EAA2B,cAA3B,CAAN;MACAP,OAAO,CAACS,KAAR,CAAc5B,KAAK,CAAC8F,UAApB;MACA3E,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAAC8F,UAAnB;MACA,OAAOC,SAAP;IACD;IAED;;;IACA,SAASA,SAAT,CAAmBrE,IAAnB,EAAyB;MACvB,OAAOL,IAAI,CAACwC,MAAL,CAAYC,IAAZ,CAAiBzC,IAAI,CAAC0C,GAAL,GAAWC,IAA5B,IAAoC5C,GAAG,CAACM,IAAD,CAAvC,GAAgDrC,EAAE,CAACqC,IAAD,CAAzD;IACD;EACF;EAED;;;EACA,SAASwD,yBAAT,CAAmCxD,IAAnC,EAAyC;IACvC,IAAIA,IAAI,KAAK5B,KAAK,CAAC6C,IAAnB,EAAyB;MACvBxB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOa,6BAAP;IACD;;IAED,OAAOa,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAASyD,sBAAT,CAAgCzD,IAAhC,EAAsC;IACpC,IAAIA,IAAI,KAAK5B,KAAK,CAACoC,KAAnB,EAA0B;MACxBf,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAF,MAAM,GAAG,EAAT;MACA,OAAOwE,qBAAP;IACD;;IAED,OAAO5C,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAASsE,qBAAT,CAA+BtE,IAA/B,EAAqC;IACnC,IACEA,IAAI,KAAK5B,KAAK,CAACwD,WAAf,IACAzD,YAAY,CAAC0D,QAAb,CAAsB/B,MAAM,CAACgC,WAAP,EAAtB,CAFF,EAGE;MACArC,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO0D,iBAAP;IACD;;IAED,IAAI7F,UAAU,CAACmC,IAAD,CAAV,IAAoBF,MAAM,CAACV,MAAP,GAAgBf,SAAS,CAACkG,cAAlD,EAAkE;MAChE9E,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACAF,MAAM,IAAIgB,MAAM,CAACC,YAAP,CAAoBf,IAApB,CAAV;MACA,OAAOsE,qBAAP;IACD;;IAED,OAAO5C,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAAS4D,+BAAT,CAAyC5D,IAAzC,EAA+C;IAC7C,IAAIA,IAAI,KAAK5B,KAAK,CAACuF,kBAAnB,EAAuC;MACrClE,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOa,6BAAP;IACD;;IAED,OAAOa,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAASa,6BAAT,CAAuCb,IAAvC,EAA6C;IAC3C,IAAIA,IAAI,KAAK5B,KAAK,CAACwD,WAAnB,EAAgC;MAC9BnC,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAO0D,iBAAP;IACD,CAJ0C,CAM3C;;;IACA,IAAI1D,IAAI,KAAK5B,KAAK,CAAC6C,IAAf,IAAuBrB,IAAI,KAAKvB,SAAS,CAAC6C,WAA9C,EAA2D;MACzDzB,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;MACA,OAAOa,6BAAP;IACD;;IAED,OAAOa,YAAY,CAAC1B,IAAD,CAAnB;EACD;EAED;;;EACA,SAAS0D,iBAAT,CAA2B1D,IAA3B,EAAiC;IAC/B,IAAIA,IAAI,KAAK5B,KAAK,CAACuD,GAAf,IAAsB5D,kBAAkB,CAACiC,IAAD,CAA5C,EAAoD;MAClDP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAAC6B,YAAnB;MACA,OAAO8D,IAAI,CAACjE,IAAD,CAAX;IACD;;IAEDP,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACA,OAAO0D,iBAAP;EACD;EAED;;;EACA,SAASO,IAAT,CAAcjE,IAAd,EAAoB;IAClBP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAACE,QAAnB;IACA,OAAOb,EAAE,CAACqC,IAAD,CAAT;EACD;AACF;AAED;;;AACA,SAAShB,iBAAT,CAA2BS,OAA3B,EAAoC9B,EAApC,EAAwC+B,GAAxC,EAA6C;EAC3C,OAAOH,KAAP;EAEA;;EACA,SAASA,KAAT,CAAeS,IAAf,EAAqB;IACnBpC,MAAM,CAACG,kBAAkB,CAACiC,IAAD,CAAnB,EAA2B,wBAA3B,CAAN;IACAP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAAC6B,YAAnB;IACAV,OAAO,CAACS,KAAR,CAAc5B,KAAK,CAACkG,eAApB;IACA/E,OAAO,CAACW,OAAR,CAAgBJ,IAAhB;IACAP,OAAO,CAACsE,IAAR,CAAazF,KAAK,CAACkG,eAAnB;IACA,OAAO/E,OAAO,CAACyE,OAAR,CAAgB3F,SAAhB,EAA2BZ,EAA3B,EAA+B+B,GAA/B,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}