{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    const kind = self.containerState.type || (code === codes.asterisk || code === codes.plusSign || code === codes.dash ? types.listUnordered : types.listOrdered);\n\n    if (kind === types.listUnordered ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n\n      if (kind === types.listUnordered) {\n        effects.enter(types.listItemPrefix);\n        return code === codes.asterisk || code === codes.dash ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n\n      if (!self.interrupt || code === codes.digit1) {\n        effects.enter(types.listItemPrefix);\n        effects.enter(types.listItemValue);\n        return inside(code);\n      }\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\n      effects.consume(code);\n      return inside;\n    }\n\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === codes.rightParenthesis || code === codes.dot)) {\n      effects.exit(types.listItemValue);\n      return atMarker(code);\n    }\n\n    return nok(code);\n  }\n  /**\n   * @type {State}\n   **/\n\n\n  function atMarker(code) {\n    assert(code !== codes.eof, 'eof (`null`) is not a marker');\n    effects.enter(types.listItemMarker);\n    effects.consume(code);\n    effects.exit(types.listItemMarker);\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine, // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n  /** @type {State} */\n\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n  /** @type {State} */\n\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.listItemPrefixWhitespace);\n      effects.consume(code);\n      effects.exit(types.listItemPrefixWhitespace);\n      return endOfPrefix;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(types.listItemPrefix), true).length;\n    return ok(code);\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine; // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(effects, ok, types.listItemIndent, self.containerState.size + 1)(code);\n  }\n  /** @type {State} */\n\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n  /** @type {State} */\n\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined;\n    return factorySpace(effects, effects.attempt(list, ok, nok), types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize)(code);\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, types.listItemIndent, self.containerState.size + 1);\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, types.listItemPrefixWhitespace, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize + 1);\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === types.listItemPrefixWhitespace ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","asciiDigit","markdownSpace","codes","constants","types","blankLine","thematicBreak","list","name","tokenize","tokenizeListStart","continuation","tokenizeListContinuation","exit","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","partial","indentConstruct","tokenizeIndent","effects","nok","self","tail","events","length","initialSize","type","linePrefix","sliceSerialize","size","start","code","kind","containerState","asterisk","plusSign","dash","listUnordered","listOrdered","marker","enter","_container","listItemPrefix","check","atMarker","interrupt","digit1","listItemValue","inside","listItemValueSizeMax","consume","rightParenthesis","dot","eof","listItemMarker","onBlank","attempt","endOfPrefix","otherPrefix","initialBlankLine","listItemPrefixWhitespace","_closeFlow","undefined","notBlank","furtherBlankLines","listItemIndent","notInCurrentItem","parser","constructs","disable","null","includes","tabSize","afterPrefix"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-core-commonmark/dev/lib/list.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {tokenize: tokenizeListContinuation},\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {tokenize: tokenizeIndent, partial: true}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\n        ? types.listUnordered\n        : types.listOrdered)\n\n    if (\n      kind === types.listUnordered\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {_container: true})\n      }\n\n      if (kind === types.listUnordered) {\n        effects.enter(types.listItemPrefix)\n        return code === codes.asterisk || code === codes.dash\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === codes.digit1) {\n        effects.enter(types.listItemPrefix)\n        effects.enter(types.listItemValue)\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === codes.rightParenthesis || code === codes.dot)\n    ) {\n      effects.exit(types.listItemValue)\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\n    effects.enter(types.listItemMarker)\n    effects.consume(code)\n    effects.exit(types.listItemMarker)\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.listItemPrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.listItemPrefixWhitespace)\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n\n  self.containerState._closeFlow = undefined\n\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      types.listItemIndent,\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemIndent,\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.listItemIndent &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemPrefixWhitespace,\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === types.listItemPrefixWhitespace\n      ? ok(code)\n      : nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}