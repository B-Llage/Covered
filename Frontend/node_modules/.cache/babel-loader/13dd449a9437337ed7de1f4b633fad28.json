{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\n\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n\n  let data;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket && !data ||\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    code === codes.caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > constants.linkReferenceSizeMax) {\n      return nok(code);\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return atBreak;\n    }\n\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return label(code);\n  }\n  /** @type {State} */\n\n\n  function label(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket || markdownLineEnding(code) || size++ > constants.linkReferenceSizeMax) {\n      effects.exit(types.chunkString);\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    data = data || !markdownSpace(code);\n    return code === codes.backslash ? labelEscape : label;\n  }\n  /** @type {State} */\n\n\n  function labelEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n\n    return label(code);\n  }\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","markdownSpace","codes","constants","types","factoryLabel","effects","nok","type","markerType","stringType","self","size","data","start","code","leftSquareBracket","enter","consume","exit","atBreak","eof","rightSquareBracket","caret","parser","constructs","linkReferenceSizeMax","lineEnding","chunkString","contentType","contentTypeString","label","backslash","labelEscape"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-factory-label/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      (code === codes.rightSquareBracket && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n      /* Hidden footnotes hook */\n      /* c8 ignore next 3 */\n      (code === codes.caret &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > constants.linkReferenceSizeMax\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return atBreak\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return label(code)\n  }\n\n  /** @type {State} */\n  function label(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      markdownLineEnding(code) ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === codes.backslash ? labelEscape : label\n  }\n\n  /** @type {State} */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}