{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport { ok as assert } from 'uvu/assert';\nimport { splice } from 'micromark-util-chunked';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\n\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n\n  let event;\n  /** @type {number|undefined} */\n\n  let lineIndex;\n  /** @type {number} */\n\n  let otherIndex;\n  /** @type {Event} */\n\n  let otherEvent;\n  /** @type {Event[]} */\n\n  let parameters;\n  /** @type {Event[]} */\n\n  let subevents;\n  /** @type {boolean|undefined} */\n\n  let more;\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n\n    event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (index && event[1].type === types.chunkFlow && events[index - 1][1].type === types.listItemPrefix) {\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens');\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.lineEndingBlank) {\n        otherIndex += 2;\n      }\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.content) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === types.content) {\n            break;\n          }\n\n          if (subevents[otherIndex][1].type === types.chunkText) {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    } // Enter.\n\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n\n        if (otherEvent[1].type === types.lineEnding || otherEvent[1].type === types.lineEndingBlank) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = types.lineEndingBlank;\n            }\n\n            otherEvent[1].type = types.lineEnding;\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  /** @type {number[]} */\n\n  const startPositions = [];\n  assert(token.contentType, 'expected `contentType` on subtokens');\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {[number, number][]} */\n\n  const jumps = [];\n  /** @type {Record<string, number>} */\n\n  const gaps = {};\n  /** @type {Chunk[]} */\n\n  let stream;\n  /** @type {Token|undefined} */\n\n  let previous;\n  let index = -1;\n  /** @type {Token|undefined} */\n\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start]; // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {// Empty.\n    }\n\n    assert(!previous || current.previous === previous, 'expected previous to match');\n    assert(!previous || previous.next === current, 'expected next to match');\n    startPositions.push(startPosition);\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n\n      if (!current.next) {\n        stream.push(codes.eof);\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n\n      tokenizer.write(stream);\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    } // Unravel the next token.\n\n\n    previous = current;\n    current = current.next;\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n\n  current = token;\n\n  while (++index < childEvents.length) {\n    if ( // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      assert(current, 'expected a current token');\n      start = index + 1;\n      breaks.push(start); // Help GC.\n\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  } // Help GC.\n\n\n  tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n    assert(!current.next, 'expected no next token');\n  } else {\n    breaks.pop();\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n\n  index = breaks.length;\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    assert(start !== undefined, 'expected a start position when splicing');\n    jumps.unshift([start, start + slice.length - 1]);\n    splice(events, start, 2, slice);\n  }\n\n  index = -1;\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n\n  return gaps;\n}","map":{"version":3,"names":["ok","assert","splice","codes","types","subtokenize","events","jumps","index","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","length","type","chunkFlow","listItemPrefix","_tokenizer","lineEndingBlank","content","chunkText","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","undefined","lineEnding","end","start","slice","unshift","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","next","push","sliceStream","eof","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","pop"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-util-subtokenize/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {splice} from 'micromark-util-chunked'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number|undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Event[]} */\n  let parameters\n  /** @type {Event[]} */\n  let subevents\n  /** @type {boolean|undefined} */\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === types.chunkFlow &&\n      events[index - 1][1].type === types.listItemPrefix\n    ) {\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.lineEndingBlank\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.content\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === types.content) {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === types.chunkText) {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === types.lineEnding ||\n          otherEvent[1].type === types.lineEndingBlank\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = types.lineEndingBlank\n            }\n\n            otherEvent[1].type = types.lineEnding\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n  const startPositions = []\n  assert(token.contentType, 'expected `contentType` on subtokens')\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Chunk[]} */\n  let stream\n  /** @type {Token|undefined} */\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    assert(\n      !previous || current.previous === previous,\n      'expected previous to match'\n    )\n    assert(!previous || previous.next === current, 'expected next to match')\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(codes.eof)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      assert(current, 'expected a current token')\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n    assert(!current.next, 'expected no next token')\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    assert(start !== undefined, 'expected a start position when splicing')\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}