{"ast":null,"code":"import { constants } from 'micromark-util-symbol/constants.js';\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\n\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {unknown[]} */\n\n  let parameters; // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n\n  remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < constants.v8MaxSafeChunkSize) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;\n    [].splice.apply(list, parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + constants.v8MaxSafeChunkSize);\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;\n      [].splice.apply(list, parameters);\n      chunkStart += constants.v8MaxSafeChunkSize;\n      start += constants.v8MaxSafeChunkSize;\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n\n  return items;\n}","map":{"version":3,"names":["constants","splice","list","start","remove","items","end","length","chunkStart","parameters","v8MaxSafeChunkSize","Array","from","unshift","apply","slice","push"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-util-chunked/dev/index.js"],"sourcesContent":["import {constants} from 'micromark-util-symbol/constants.js'\n\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < constants.v8MaxSafeChunkSize) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove])\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(\n        chunkStart,\n        chunkStart + constants.v8MaxSafeChunkSize\n      )\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n\n      chunkStart += constants.v8MaxSafeChunkSize\n      start += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oCAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4C;EACjD,MAAMC,GAAG,GAAGJ,IAAI,CAACK,MAAjB;EACA,IAAIC,UAAU,GAAG,CAAjB;EACA;;EACA,IAAIC,UAAJ,CAJiD,CAMjD;;EACA,IAAIN,KAAK,GAAG,CAAZ,EAAe;IACbA,KAAK,GAAG,CAACA,KAAD,GAASG,GAAT,GAAe,CAAf,GAAmBA,GAAG,GAAGH,KAAjC;EACD,CAFD,MAEO;IACLA,KAAK,GAAGA,KAAK,GAAGG,GAAR,GAAcA,GAAd,GAAoBH,KAA5B;EACD;;EAEDC,MAAM,GAAGA,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,CAA/B,CAbiD,CAejD;;EACA,IAAIC,KAAK,CAACE,MAAN,GAAeP,SAAS,CAACU,kBAA7B,EAAiD;IAC/CD,UAAU,GAAGE,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAb;IACAI,UAAU,CAACI,OAAX,CAAmBV,KAAnB,EAA0BC,MAA1B,EACA;IADA;IAEC,GAAGH,MAAH,CAAUa,KAAV,CAAgBZ,IAAhB,EAAsBO,UAAtB;EACF,CALD,MAKO;IACL;IACA,IAAIL,MAAJ,EAAY,GAAGH,MAAH,CAAUa,KAAV,CAAgBZ,IAAhB,EAAsB,CAACC,KAAD,EAAQC,MAAR,CAAtB,EAFP,CAIL;;IACA,OAAOI,UAAU,GAAGH,KAAK,CAACE,MAA1B,EAAkC;MAChCE,UAAU,GAAGJ,KAAK,CAACU,KAAN,CACXP,UADW,EAEXA,UAAU,GAAGR,SAAS,CAACU,kBAFZ,CAAb;MAIAD,UAAU,CAACI,OAAX,CAAmBV,KAAnB,EAA0B,CAA1B,EACA;MADA;MAEC,GAAGF,MAAH,CAAUa,KAAV,CAAgBZ,IAAhB,EAAsBO,UAAtB;MAEDD,UAAU,IAAIR,SAAS,CAACU,kBAAxB;MACAP,KAAK,IAAIH,SAAS,CAACU,kBAAnB;IACD;EACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,IAAT,CAAcd,IAAd,EAAoBG,KAApB,EAA2B;EAChC,IAAIH,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;IACnBN,MAAM,CAACC,IAAD,EAAOA,IAAI,CAACK,MAAZ,EAAoB,CAApB,EAAuBF,KAAvB,CAAN;IACA,OAAOH,IAAP;EACD;;EAED,OAAOG,KAAP;AACD"},"metadata":{},"sourceType":"module"}