{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';var initialState={userData:{name:'',location:'',position:'',companyName:'',education:'',degree:'',schoolName:''},skills:['test']};export var formSlice=createSlice({name:'form',initialState:initialState,reducers:{setUserData:function setUserData(state,action){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.userData=action.payload.userData;},setSkills:function setSkills(state,action){state.skills=action.payload.skills;}}});// Action creators are generated for each case reducer function\nvar _formSlice$actions=formSlice.actions,setUserData=_formSlice$actions.setUserData,setSkills=_formSlice$actions.setSkills;export{setUserData,setSkills};export default formSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","userData","name","location","position","companyName","education","degree","schoolName","skills","formSlice","reducers","setUserData","state","action","payload","setSkills","actions","reducer"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/src/Slices/FormSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { FormState } from '../Domain/Interfaces/FormState'\r\n\r\nconst initialState: FormState = {\r\n    userData: {\r\n        name: '',\r\n        location: '',\r\n        position: '',\r\n        companyName: '',\r\n        education: '',\r\n        degree: '',\r\n        schoolName: '',\r\n      },\r\n      skills: ['test']\r\n  }\r\nexport const formSlice = createSlice({\r\n  name: 'form',\r\n  \r\n  initialState,\r\n  reducers: {\r\n    setUserData: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.userData =  action.payload.userData\r\n    },\r\n    setSkills: (state, action) => {\r\n        state.skills = action.payload.skills\r\n    }\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setUserData, setSkills } = formSlice.actions\r\n\r\nexport default formSlice.reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAGA,GAAMC,aAAuB,CAAG,CAC5BC,QAAQ,CAAE,CACNC,IAAI,CAAE,EADA,CAENC,QAAQ,CAAE,EAFJ,CAGNC,QAAQ,CAAE,EAHJ,CAINC,WAAW,CAAE,EAJP,CAKNC,SAAS,CAAE,EALL,CAMNC,MAAM,CAAE,EANF,CAONC,UAAU,CAAE,EAPN,CADkB,CAU1BC,MAAM,CAAE,CAAC,MAAD,CAVkB,CAAhC,CAYA,MAAO,IAAMC,UAAS,CAAGX,WAAW,CAAC,CACnCG,IAAI,CAAE,MAD6B,CAGnCF,YAAY,CAAZA,YAHmC,CAInCW,QAAQ,CAAE,CACRC,WAAW,CAAE,qBAACC,KAAD,CAAQC,MAAR,CAAmB,CAC9B;AACA;AACA;AACA;AACAD,KAAK,CAACZ,QAAN,CAAkBa,MAAM,CAACC,OAAP,CAAed,QAAjC,CACD,CAPO,CAQRe,SAAS,CAAE,mBAACH,KAAD,CAAQC,MAAR,CAAmB,CAC1BD,KAAK,CAACJ,MAAN,CAAeK,MAAM,CAACC,OAAP,CAAeN,MAA9B,CACH,CAVO,CAJyB,CAAD,CAA7B,CAkBP;AACO,uBAAmCC,SAAS,CAACO,OAA7C,CAAQL,WAAR,oBAAQA,WAAR,CAAqBI,SAArB,oBAAqBA,SAArB,C,8BAEP,cAAeN,UAAS,CAACQ,OAAzB"},"metadata":{},"sourceType":"module"}