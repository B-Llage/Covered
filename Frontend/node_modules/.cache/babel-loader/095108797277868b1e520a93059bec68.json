{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\n\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      seen = true;\n      return start;\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? types.linePrefix : types.lineSuffix)(code);\n    }\n\n    return ok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","types","factoryWhitespace","effects","ok","seen","start","code","enter","lineEnding","consume","exit","linePrefix","lineSuffix"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark-factory-whitespace/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? types.linePrefix : types.lineSuffix\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,EAApC,EAAwC;EAC7C;EACA,IAAIC,IAAJ;EAEA,OAAOC,KAAP;EAEA;;EACA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnB,IAAIR,kBAAkB,CAACQ,IAAD,CAAtB,EAA8B;MAC5BJ,OAAO,CAACK,KAAR,CAAcP,KAAK,CAACQ,UAApB;MACAN,OAAO,CAACO,OAAR,CAAgBH,IAAhB;MACAJ,OAAO,CAACQ,IAAR,CAAaV,KAAK,CAACQ,UAAnB;MACAJ,IAAI,GAAG,IAAP;MACA,OAAOC,KAAP;IACD;;IAED,IAAIN,aAAa,CAACO,IAAD,CAAjB,EAAyB;MACvB,OAAOT,YAAY,CACjBK,OADiB,EAEjBG,KAFiB,EAGjBD,IAAI,GAAGJ,KAAK,CAACW,UAAT,GAAsBX,KAAK,CAACY,UAHf,CAAZ,CAILN,IAJK,CAAP;IAKD;;IAED,OAAOH,EAAE,CAACG,IAAD,CAAT;EACD;AACF"},"metadata":{},"sourceType":"module"}