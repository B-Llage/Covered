{"ast":null,"code":"import _createClass from \"C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\nimport { stringifyPosition } from 'unist-util-stringify-position';\nexport var VFileMessage = /*#__PURE__*/function (_Error) {\n  _inherits(VFileMessage, _Error);\n\n  var _super = _createSuper(VFileMessage);\n\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  function VFileMessage(reason, place, origin) {\n    var _this;\n\n    _classCallCheck(this, VFileMessage);\n\n    /** @type {[string|null, string|null]} */\n    var parts = [null, null];\n    /** @type {Position} */\n\n    var position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {\n        line: null,\n        column: null\n      },\n      // @ts-expect-error: \"\n      end: {\n        line: null,\n        column: null\n      }\n    };\n    _this = _super.call(this);\n\n    if (typeof place === 'string') {\n      origin = place;\n      place = undefined;\n    }\n\n    if (typeof origin === 'string') {\n      var index = origin.indexOf(':');\n\n      if (index === -1) {\n        parts[1] = origin;\n      } else {\n        parts[0] = origin.slice(0, index);\n        parts[1] = origin.slice(index + 1);\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position;\n        }\n      } // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place;\n      } // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place;\n      }\n    } // Fields from `Error`\n\n\n    _this.name = stringifyPosition(place) || '1:1';\n    /** @type {string} */\n\n    _this.message = typeof reason === 'object' ? reason.message : reason;\n    /** @type {string} */\n\n    _this.stack = '';\n\n    if (typeof reason === 'object' && reason.stack) {\n      _this.stack = reason.stack;\n    }\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n\n\n    _this.reason = _this.message;\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n\n    _this.fatal;\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n\n    _this.line = position.start.line;\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n\n    _this.column = position.start.column;\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n\n    _this.position = position;\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n\n    _this.source = parts[0];\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n\n    _this.ruleId = parts[1];\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n\n    _this.file; // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n\n    _this.actual;\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n\n    _this.expected;\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n\n    _this.url;\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n\n    _this.note;\n    /* eslint-enable no-unused-expressions */\n\n    return _this;\n  }\n\n  return _createClass(VFileMessage);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nVFileMessage.prototype.file = '';\nVFileMessage.prototype.name = '';\nVFileMessage.prototype.reason = '';\nVFileMessage.prototype.message = '';\nVFileMessage.prototype.stack = '';\nVFileMessage.prototype.fatal = null;\nVFileMessage.prototype.column = null;\nVFileMessage.prototype.line = null;\nVFileMessage.prototype.source = null;\nVFileMessage.prototype.ruleId = null;\nVFileMessage.prototype.position = null;","map":{"version":3,"names":["stringifyPosition","VFileMessage","reason","place","origin","parts","position","start","line","column","end","undefined","index","indexOf","slice","name","message","stack","fatal","source","ruleId","file","actual","expected","url","note","Error","prototype"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/vfile-message/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    /** @type {string} */\n    this.message = typeof reason === 'object' ? reason.message : reason\n    /** @type {string} */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n    this.position = position\n\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n    this.actual\n\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n    this.expected\n\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,+BAAhC;AAEA,WAAaC,YAAb;EAAA;;EAAA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,sBAAYC,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;IAAA;;IAAA;;IACjC;IACA,IAAMC,KAAK,GAAG,CAAC,IAAD,EAAO,IAAP,CAAd;IACA;;IACA,IAAIC,QAAQ,GAAG;MACb;MACAC,KAAK,EAAE;QAACC,IAAI,EAAE,IAAP;QAAaC,MAAM,EAAE;MAArB,CAFM;MAGb;MACAC,GAAG,EAAE;QAACF,IAAI,EAAE,IAAP;QAAaC,MAAM,EAAE;MAArB;IAJQ,CAAf;IAOA;;IAEA,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;MAC7BC,MAAM,GAAGD,KAAT;MACAA,KAAK,GAAGQ,SAAR;IACD;;IAED,IAAI,OAAOP,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,IAAMQ,KAAK,GAAGR,MAAM,CAACS,OAAP,CAAe,GAAf,CAAd;;MAEA,IAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChBP,KAAK,CAAC,CAAD,CAAL,GAAWD,MAAX;MACD,CAFD,MAEO;QACLC,KAAK,CAAC,CAAD,CAAL,GAAWD,MAAM,CAACU,KAAP,CAAa,CAAb,EAAgBF,KAAhB,CAAX;QACAP,KAAK,CAAC,CAAD,CAAL,GAAWD,MAAM,CAACU,KAAP,CAAaF,KAAK,GAAG,CAArB,CAAX;MACD;IACF;;IAED,IAAIT,KAAJ,EAAW;MACT;MACA,IAAI,UAAUA,KAAV,IAAmB,cAAcA,KAArC,EAA4C;QAC1C,IAAIA,KAAK,CAACG,QAAV,EAAoB;UAClB;UACAA,QAAQ,GAAGH,KAAK,CAACG,QAAjB;QACD;MACF,CALD,CAMA;MANA,KAOK,IAAI,WAAWH,KAAX,IAAoB,SAASA,KAAjC,EAAwC;QAC3C;QACAG,QAAQ,GAAGH,KAAX;MACD,CAHI,CAIL;MAJK,KAKA,IAAI,UAAUA,KAAV,IAAmB,YAAYA,KAAnC,EAA0C;QAC7CG,QAAQ,CAACC,KAAT,GAAiBJ,KAAjB;MACD;IACF,CA9CgC,CAgDjC;;;IACA,MAAKY,IAAL,GAAYf,iBAAiB,CAACG,KAAD,CAAjB,IAA4B,KAAxC;IACA;;IACA,MAAKa,OAAL,GAAe,OAAOd,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,CAACc,OAApC,GAA8Cd,MAA7D;IACA;;IACA,MAAKe,KAAL,GAAa,EAAb;;IAEA,IAAI,OAAOf,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACe,KAAzC,EAAgD;MAC9C,MAAKA,KAAL,GAAaf,MAAM,CAACe,KAApB;IACD;IAED;AACJ;AACA;AACA;AACA;;;IACI,MAAKf,MAAL,GAAc,MAAKc,OAAnB;IAEA;;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKE,KAAL;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKV,IAAL,GAAYF,QAAQ,CAACC,KAAT,CAAeC,IAA3B;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKC,MAAL,GAAcH,QAAQ,CAACC,KAAT,CAAeE,MAA7B;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,MAAKH,QAAL,GAAgBA,QAAhB;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKa,MAAL,GAAcd,KAAK,CAAC,CAAD,CAAnB;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKe,MAAL,GAAcf,KAAK,CAAC,CAAD,CAAnB;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKgB,IAAL,CAzHiC,CA2HjC;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,MAAKC,MAAL;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,MAAKC,QAAL;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKC,GAAL;IAEA;AACJ;AACA;AACA;AACA;;IACI,MAAKC,IAAL;IACA;;IA5JiC;EA6JlC;;EA3KH;AAAA,iCAAkCC,KAAlC;AA8KAzB,YAAY,CAAC0B,SAAb,CAAuBN,IAAvB,GAA8B,EAA9B;AACApB,YAAY,CAAC0B,SAAb,CAAuBZ,IAAvB,GAA8B,EAA9B;AACAd,YAAY,CAAC0B,SAAb,CAAuBzB,MAAvB,GAAgC,EAAhC;AACAD,YAAY,CAAC0B,SAAb,CAAuBX,OAAvB,GAAiC,EAAjC;AACAf,YAAY,CAAC0B,SAAb,CAAuBV,KAAvB,GAA+B,EAA/B;AACAhB,YAAY,CAAC0B,SAAb,CAAuBT,KAAvB,GAA+B,IAA/B;AACAjB,YAAY,CAAC0B,SAAb,CAAuBlB,MAAvB,GAAgC,IAAhC;AACAR,YAAY,CAAC0B,SAAb,CAAuBnB,IAAvB,GAA8B,IAA9B;AACAP,YAAY,CAAC0B,SAAb,CAAuBR,MAAvB,GAAgC,IAAhC;AACAlB,YAAY,CAAC0B,SAAb,CAAuBP,MAAvB,GAAgC,IAAhC;AACAnB,YAAY,CAAC0B,SAAb,CAAuBrB,QAAvB,GAAkC,IAAlC"},"metadata":{},"sourceType":"module"}