{"ast":null,"code":"import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { values } from 'micromark-util-symbol/values.js';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\n\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n\n  if (!protocol) {\n    return value;\n  }\n\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n\n  if ( // If there is no protocol, it’s relative.\n  colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign || // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n\n  return '';\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n\n    let replace = ''; // A correct percent encoded value.\n\n    if (code === codes.percentSign && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1); // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      } // Lone surrogate.\n      else {\n        replace = values.replacementCharacter;\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n\n  return result.join('') + value.slice(start);\n}","map":{"version":3,"names":["asciiAlphanumeric","encode","codes","values","sanitizeUri","url","protocol","value","normalizeUri","colon","indexOf","questionMark","numberSign","slash","test","slice","result","index","start","skip","length","code","charCodeAt","replace","percentSign","String","fromCharCode","next","replacementCharacter","push","encodeURIComponent","join"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-util-sanitize-uri/dev/index.js"],"sourcesContent":["import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === codes.percentSign &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = values.replacementCharacter\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}