{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  userData: {\n    name: '',\n    location: '',\n    position: '',\n    companyName: '',\n    education: '',\n    degree: '',\n    schoolName: ''\n  },\n  skills: ['test']\n};\nexport const formSlice = createSlice({\n  name: 'form',\n  initialState,\n  reducers: {\n    setUserData: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(action);\n      state.userData = action.payload.userData;\n    },\n    setSkills: (state, action) => {\n      state.skills = action.payload.skills;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  setUserData,\n  setSkills\n} = formSlice.actions;\nexport default formSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","userData","name","location","position","companyName","education","degree","schoolName","skills","formSlice","reducers","setUserData","state","action","console","log","payload","setSkills","actions","reducer"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/src/Slices/FormSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { FormState } from '../Domain/Interfaces/FormState'\r\n\r\nconst initialState: FormState = {\r\n    userData: {\r\n        name: '',\r\n        location: '',\r\n        position: '',\r\n        companyName: '',\r\n        education: '',\r\n        degree: '',\r\n        schoolName: '',\r\n      },\r\n      skills: ['test']\r\n  }\r\nexport const formSlice = createSlice({\r\n  name: 'form',\r\n  \r\n  initialState,\r\n  reducers: {\r\n    setUserData: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      console.log(action)\r\n      state.userData =  action.payload.userData\r\n    },\r\n    setSkills: (state, action) => {\r\n        state.skills = action.payload.skills\r\n    }\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setUserData, setSkills } = formSlice.actions\r\n\r\nexport default formSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAuB,GAAG;EAC5BC,QAAQ,EAAE;IACNC,IAAI,EAAE,EADA;IAENC,QAAQ,EAAE,EAFJ;IAGNC,QAAQ,EAAE,EAHJ;IAINC,WAAW,EAAE,EAJP;IAKNC,SAAS,EAAE,EALL;IAMNC,MAAM,EAAE,EANF;IAONC,UAAU,EAAE;EAPN,CADkB;EAU1BC,MAAM,EAAE,CAAC,MAAD;AAVkB,CAAhC;AAYA,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAAC;EACnCG,IAAI,EAAE,MAD6B;EAGnCF,YAHmC;EAInCW,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC9B;MACA;MACA;MACA;MACAC,OAAO,CAACC,GAAR,CAAYF,MAAZ;MACAD,KAAK,CAACZ,QAAN,GAAkBa,MAAM,CAACG,OAAP,CAAehB,QAAjC;IACD,CARO;IASRiB,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC1BD,KAAK,CAACJ,MAAN,GAAeK,MAAM,CAACG,OAAP,CAAeR,MAA9B;IACH;EAXO;AAJyB,CAAD,CAA7B,C,CAmBP;;AACA,OAAO,MAAM;EAAEG,WAAF;EAAeM;AAAf,IAA6BR,SAAS,CAACS,OAA7C;AAEP,eAAeT,SAAS,CAACU,OAAzB"},"metadata":{},"sourceType":"module"}