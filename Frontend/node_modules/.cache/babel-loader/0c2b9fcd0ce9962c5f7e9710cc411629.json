{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {InitialConstruct} */\n\nexport const flow = {\n  tokenize: initializeFlow\n};\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt( // Try to parse a blank line.\n  blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), types.linePrefix)));\n  return initial;\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter(types.lineEndingBlank);\n    effects.consume(code);\n    effects.exit(types.lineEndingBlank);\n    self.currentConstruct = undefined;\n    return initial;\n  }\n  /** @type {State} */\n\n\n  function afterConstruct(code) {\n    assert(code === codes.eof || markdownLineEnding(code), 'expected eol or eof');\n\n    if (code === codes.eof) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","map":{"version":3,"names":["ok","assert","blankLine","content","factorySpace","markdownLineEnding","codes","types","flow","tokenize","initializeFlow","effects","self","initial","attempt","atBlankEnding","parser","constructs","flowInitial","afterConstruct","linePrefix","code","eof","consume","enter","lineEndingBlank","exit","currentConstruct","undefined","lineEnding"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark/dev/lib/initialize/flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {InitialConstruct} */\nexport const flow = {tokenize: initializeFlow}\n\n/** @type {Initializer} */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        types.linePrefix\n      )\n    )\n  )\n\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,2BAAjC;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,IAAI,GAAG;EAACC,QAAQ,EAAEC;AAAX,CAAb;AAEP;;AACA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC/B,MAAMC,IAAI,GAAG,IAAb;EACA,MAAMC,OAAO,GAAGF,OAAO,CAACG,OAAR,EACd;EACAZ,SAFc,EAGda,aAHc,EAId;EACAJ,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBC,WADzB,EAEEC,cAFF,EAGEf,YAAY,CACVO,OADU,EAEVA,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBT,IADzB,EAEEW,cAFF,EAGER,OAAO,CAACG,OAAR,CAAgBX,OAAhB,EAAyBgB,cAAzB,CAHF,CAFU,EAOVZ,KAAK,CAACa,UAPI,CAHd,CALc,CAAhB;EAoBA,OAAOP,OAAP;EAEA;;EACA,SAASE,aAAT,CAAuBM,IAAvB,EAA6B;IAC3BpB,MAAM,CACJoB,IAAI,KAAKf,KAAK,CAACgB,GAAf,IAAsBjB,kBAAkB,CAACgB,IAAD,CADpC,EAEJ,qBAFI,CAAN;;IAKA,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAnB,EAAwB;MACtBX,OAAO,CAACY,OAAR,CAAgBF,IAAhB;MACA;IACD;;IAEDV,OAAO,CAACa,KAAR,CAAcjB,KAAK,CAACkB,eAApB;IACAd,OAAO,CAACY,OAAR,CAAgBF,IAAhB;IACAV,OAAO,CAACe,IAAR,CAAanB,KAAK,CAACkB,eAAnB;IACAb,IAAI,CAACe,gBAAL,GAAwBC,SAAxB;IACA,OAAOf,OAAP;EACD;EAED;;;EACA,SAASM,cAAT,CAAwBE,IAAxB,EAA8B;IAC5BpB,MAAM,CACJoB,IAAI,KAAKf,KAAK,CAACgB,GAAf,IAAsBjB,kBAAkB,CAACgB,IAAD,CADpC,EAEJ,qBAFI,CAAN;;IAKA,IAAIA,IAAI,KAAKf,KAAK,CAACgB,GAAnB,EAAwB;MACtBX,OAAO,CAACY,OAAR,CAAgBF,IAAhB;MACA;IACD;;IAEDV,OAAO,CAACa,KAAR,CAAcjB,KAAK,CAACsB,UAApB;IACAlB,OAAO,CAACY,OAAR,CAAgBF,IAAhB;IACAV,OAAO,CAACe,IAAR,CAAanB,KAAK,CAACsB,UAAnB;IACAjB,IAAI,CAACe,gBAAL,GAAwBC,SAAxB;IACA,OAAOf,OAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}