{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\n\nexport function classifyCharacter(code) {\n  if (code === codes.eof || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return constants.characterGroupWhitespace;\n  }\n\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation;\n  }\n}","map":{"version":3,"names":["markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","codes","constants","classifyCharacter","code","eof","characterGroupWhitespace","characterGroupPunctuation"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-util-classify-character/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === codes.eof ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return constants.characterGroupWhitespace\n  }\n\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,SACEA,yBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,0BAJP;AAKA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EACtC,IACEA,IAAI,KAAKH,KAAK,CAACI,GAAf,IACAP,yBAAyB,CAACM,IAAD,CADzB,IAEAJ,iBAAiB,CAACI,IAAD,CAHnB,EAIE;IACA,OAAOF,SAAS,CAACI,wBAAjB;EACD;;EAED,IAAIP,kBAAkB,CAACK,IAAD,CAAtB,EAA8B;IAC5B,OAAOF,SAAS,CAACK,yBAAjB;EACD;AACF"},"metadata":{},"sourceType":"module"}