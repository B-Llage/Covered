{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.autolink);\n    effects.enter(types.autolinkMarker);\n    effects.consume(code);\n    effects.exit(types.autolinkMarker);\n    effects.enter(types.autolinkProtocol);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function schemeOrEmailAtext(code) {\n    return code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code);\n      return urlInside;\n    }\n\n    if ((code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code)) && size++ < constants.autolinkSchemeSizeMax) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n\n    return emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol);\n      return end(code);\n    }\n\n    if (code === codes.eof || code === codes.space || code === codes.lessThan || asciiControl(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return urlInside;\n  }\n  /** @type {State} */\n\n\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;\n      return end(code);\n    }\n\n    return emailValue(code);\n  }\n  /** @type {State} */\n\n\n  function emailValue(code) {\n    if ((code === codes.dash || asciiAlphanumeric(code)) && size++ < constants.autolinkDomainSizeMax) {\n      effects.consume(code);\n      return code === codes.dash ? emailValue : emailLabel;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    assert(code === codes.greaterThan, 'expected `>`');\n    effects.enter(types.autolinkMarker);\n    effects.consume(code);\n    effects.exit(types.autolinkMarker);\n    effects.exit(types.autolink);\n    return ok;\n  }\n}","map":{"version":3,"names":["ok","assert","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","codes","constants","types","autolink","name","tokenize","tokenizeAutolink","effects","nok","size","start","code","lessThan","enter","autolinkMarker","consume","exit","autolinkProtocol","open","schemeOrEmailAtext","emailAtext","plusSign","dash","dot","schemeInsideOrEmailAtext","colon","urlInside","autolinkSchemeSizeMax","greaterThan","end","eof","space","atSign","emailAtSignOrDot","emailLabel","type","autolinkEmail","emailValue","autolinkDomainSizeMax"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-core-commonmark/dev/lib/autolink.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/** @type {Tokenizer} */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function schemeOrEmailAtext(code) {\n    return code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n\n  /** @type {State} */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n\n  /** @type {State} */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      return end(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /** @type {State} */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n\n  /** @type {State} */\n  function emailValue(code) {\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      effects.consume(code)\n      return code === codes.dash ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    assert(code === codes.greaterThan, 'expected `>`')\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.exit(types.autolink)\n    return ok\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}