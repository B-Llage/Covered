{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport { markdownSpace } from 'micromark-util-character';\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n\n    effects.exit(type);\n    return ok(code);\n  }\n}","map":{"version":3,"names":["markdownSpace","factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","start","code","enter","prefix","consume","exit"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/node_modules/micromark-factory-space/dev/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,0BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyCC,GAAzC,EAA8C;EACnD,MAAMC,KAAK,GAAGD,GAAG,GAAGA,GAAG,GAAG,CAAT,GAAaE,MAAM,CAACC,iBAArC;EACA,IAAIC,IAAI,GAAG,CAAX;EAEA,OAAOC,KAAP;EAEA;;EACA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnB,IAAIX,aAAa,CAACW,IAAD,CAAjB,EAAyB;MACvBT,OAAO,CAACU,KAAR,CAAcR,IAAd;MACA,OAAOS,MAAM,CAACF,IAAD,CAAb;IACD;;IAED,OAAOR,EAAE,CAACQ,IAAD,CAAT;EACD;EAED;;;EACA,SAASE,MAAT,CAAgBF,IAAhB,EAAsB;IACpB,IAAIX,aAAa,CAACW,IAAD,CAAb,IAAuBF,IAAI,KAAKH,KAApC,EAA2C;MACzCJ,OAAO,CAACY,OAAR,CAAgBH,IAAhB;MACA,OAAOE,MAAP;IACD;;IAEDX,OAAO,CAACa,IAAR,CAAaX,IAAb;IACA,OAAOD,EAAE,CAACQ,IAAD,CAAT;EACD;AACF"},"metadata":{},"sourceType":"module"}