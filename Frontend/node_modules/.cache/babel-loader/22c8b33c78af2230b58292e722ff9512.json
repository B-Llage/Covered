{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n    /** @type {State} */\n\n\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code);\n        return;\n      }\n\n      effects.enter(types.data);\n      effects.consume(code);\n      return data;\n    }\n    /** @type {State} */\n\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data);\n        return text(code);\n      } // Data.\n\n\n      effects.consume(code);\n      return data;\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true;\n      }\n\n      const list = constructs[code];\n      let index = -1;\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index];\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\n\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number|undefined} */\n\n    let enter; // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n\n        enter = undefined;\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === types.lineEnding) && events[eventIndex - 1][1].type === types.data) {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean|undefined} */\n\n      let tabs;\n\n      while (index--) {\n        const chunk = chunks[index];\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++;\n            bufferIndex--;\n          }\n\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        } // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true;\n          size++;\n        } else if (chunk === codes.virtualSpace) {// Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < constants.hardBreakPrefixSizeMin ? types.lineSuffix : types.hardBreakTrailing,\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n\n      eventIndex++;\n    }\n  }\n\n  return events;\n}","map":{"version":3,"names":["codes","constants","types","resolver","resolveAll","createResolver","string","initializeFactory","text","field","tokenize","initializeText","resolveAllLineSuffixes","undefined","effects","self","constructs","parser","attempt","start","notText","code","atBreak","eof","consume","enter","data","exit","list","index","length","item","previous","call","extraResolver","resolveAllText","events","context","type","end","splice","eventIndex","lineEnding","chunks","sliceStream","bufferIndex","size","tabs","chunk","charCodeAt","space","horizontalTab","virtualSpace","token","hardBreakPrefixSizeMin","lineSuffix","hardBreakTrailing","line","column","offset","_index","_bufferIndex","Object","assign"],"sources":["C:/Users/hecto/source/repos/React-Projects/covered/Covered/node_modules/micromark/dev/lib/initialize/text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nexport const resolver = {resolveAll: createResolver()}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /** @type {Initializer} */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter(types.data)\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data)\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === types.lineEnding) &&\n      events[eventIndex - 1][1].type === types.data\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true\n          size++\n        } else if (chunk === codes.virtualSpace) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length ||\n            tabs ||\n            size < constants.hardBreakPrefixSizeMin\n              ? types.lineSuffix\n              : types.hardBreakTrailing,\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}